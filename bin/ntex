#!/bin/bash

### If multiple input files are given, build each
if [[ -e $2 ]]; then
    for i in $@; do
        ntex $i
    done
    exit 0
fi

XELATEXARGS=""

SYNC_HTTPTMP=y
#####################################################################
### Parse arguments. Magic; do not touch.
POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
  case $1 in
    --2)
        BUILD_TWICE="y"
        shift # past argument
        ;;
    --png)
        TOIMG="png"
        shift # past argument
        ;;
    --jpg)
        TOIMG="jpg"
        shift # past argument
        ;;
    --oss)
        TONASOOS="y"
        shift # past argument
        ;;
    --range=*)
        PAGES_RANGE="${1/--range=/}"
        shift # past argument
        ;;
    --rname=*)
        RANGED_NAME="${1/--rname=/}"
        shift # past argument
        ;;
    --altfn=*)
        INPUT_ALTFN="${1/--altfn=/}.pdf"
        shift # past argument
        ;;
    --sync)
        SYNC_HTTPTMP=y
        shift # past argument
        ;;
    --nosync)
        SYNC_HTTPTMP=n
        shift # past argument
        ;;
    -*|--*)
        echo "Unknown option $1"
        exit 1
        ;;
    *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift # past argument
        ;;
  esac
done
set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters
#####################################################################



FilePath="$1"
BaseName="$(basename $FilePath)"
REPOID="$(basename $PWD)"
TYPE_SLASH="${FilePath/$BaseName/}"

# echo "FilePath=$FilePath"
# echo "BaseName=$BaseName"
# echo "TYPE_SLASH=$TYPE_SLASH"

mkdir -p "_dist/tex-tmp" "_dist/$TYPE_SLASH"

function _realBuild() {
    xelatex $XELATEXARGS \
        -output-directory=_dist/tex-tmp \
        -shell-escape \
        "$FilePath"
}
_realBuild
if [[ $BUILD_TWICE == y ]]; then ### Build twice
    _realBuild
fi

mv _dist/tex-tmp/*.pdf "_dist/$TYPE_SLASH"

REALPATH=$(realpath "_dist/${FilePath/.tex/.pdf}")
PDFFN="$(basename "$REALPATH")"

echo -e "\nDocument Size:"
du -h "$REALPATH"

### Send to /tmp/http
CLASSNAME="$(basename "$PWD")" ALTFN="$INPUT_ALTFN" cptmphttp "$REALPATH"


### --oss
if [[ $TONASOOS == y ]]; then
    TMPFILE=/tmp/9915e62e-3d15-41cd-9d67-008487ec22ee
    echo -e "\nDocument URLs:"
    OSS_SUBDIR="$REPOID/" saveFileToNasOSS "$REALPATH" -p > $TMPFILE
    cat $TMPFILE
    cat $TMPFILE | pushclip push neruthes
    echo "$TYPE_SLASH$PDFFN $(grep "oss.neruthes.xyz:2096/p/" $TMPFILE)" >> .osslist
    sort -u .osslist -o .osslist
    rm $TMPFILE
fi

### --jpg | --png
case "$TOIMG" in
    jpg|png)
        # mkdir -p /tmp/http/nteximg
        # chmod 777 /tmp/http/nteximg
        FHASH1="$(echo "$REALPATH" | sha256sum)"
        IMGPATH="$(basename "$REALPATH")-${FHASH1:0:12}.%d.$TOIMG"
        if [[ -e "$IMGPATH" ]]; then
            rm "$IMGPATH" 2>/dev/null
        fi
        pdftopng "$REALPATH" /tmp/http/nteximg
        #  >/dev/null 2>&1
        # echo "Made image:" "$IMGPATH"
        if [[ $TONASOOS == y ]]; then
            echo -e "\nImage URLs:"
            OSS_SUBDIR="$REPOID-img/" saveFileToNasOSS "$IMGPATH"
        fi
        ;;
esac

### --range
if [[ ! -z "$PAGES_RANGE" ]]; then
    echo "Generating ranged subset."
    # RANGED_PDF_PATH="/tmp/${PDFFN/.pdf/}_page$PAGES_RANGE.pdf"
    # pdftk "$REALPATH" cat $PAGES_RANGE output "$RANGED_PDF_PATH"
    # du -h "$RANGED_PDF_PATH"
    # if [[ $TONASOOS == y ]]; then
    #     OSS_SUBDIR=ntexdb-ranged/ saveFileToNasOSS "$RANGED_PDF_PATH"
    # fi
    RANGED_NAME="$RANGED_NAME" OSS=y pdfrange "$REALPATH" "$PAGES_RANGE"
fi




### --sync | --nosync
if [[ "$SYNC_HTTPTMP" == y ]]; then
    echo "Generating ranged subset."
    synctmphttptonas
fi
