#!/bin/bash

if [[ "$HOSTNAME" != "NLive-Gentoo" ]]; then
    echo "This script can only work on NLive-Gentoo"
    exit 1
fi

echo "We should not actually execute this script."
echo "This is only a note."
exit 0


function SC_mksqfs() {
    # ### Variables
    # LIVE_DIST_DIR=/nlive/nlivegentoodist
    # mkdir -p $LIVE_DIST_DIR

    # ### Make directories
    # SUBDIRS_LIST="bin boot dev etc home lib lib64 media mnt opt proc root run sbin sys tmp usr var"
    # #            "755 755  755 755 755  755 755   755   755 755 555  700  755 755  555 777 755 755"
    # for SUBDIR in $SUBDIRS_LIST; do
    #     mkdir -p $LIVE_DIST_DIR/$SUBDIR
    # done

    EXCL_LIST_FILE=/nlive/filldistdir_excluded_dirs
    echo "/tmp/*
/nlive
/swapfile
/sys
/dev
/proc
/run
/mnt/*
/boot
/etc
/root
/home
/sbin
/bin" > $EXCL_LIST_FILE
    # echo "List of exlucded files:"
    # echo ""
    # cat $EXCL_LIST_FILE

    ### Deprecated
    mksquashfs / /nlive/root.squashfs -comp zstd -b 1M -one-file-system -Xcompression-level 22 -ef $EXCL_LIST_FILE -info -progress

    ### Test only
    function _mksq() {
        SQNAME=$1
        EXCLARGS=$2
        mksquashfs /$1 /nlive/sqfs.$1 -comp zstd -b 1M -one-file-system -Xcompression-level 22 -info -progress $2
    }
    _mksq var "-e /var/db/repos/gentoo /var/tmp /var/cache /var/log /var/spool"
    _mksq usr "-e /usr/src /usr/libexec/gcc /usr/lib/gcc/x86_64-pc-linux-gnu /usr/x86_64-pc-linux-gnu /usr/lib/rust"
    _mksq opt
    _mksq lib
}

function SC_DONOTRUN() {
    return 0
    #==============================================
    # Some notes for manual execution
    #==============================================
    
    
    
    # chmod 755 bin
    # chmod 755 boot
    # chmod 755 dev
    # chmod 755 etc
    # chmod 755 home
    # chmod 755 lib
    # chmod 755 lib64
    # chmod 755 media
    # chmod 755 mnt
    # chmod 755 opt
    # chmod 555 proc
    # chmod 700 root
    # chmod 755 run
    # chmod 755 sbin
    # chmod 555 sys
    # chmod 777 tmp
    # chmod 755 usr
    # chmod 755 var

    mkdir -p /mnt/finaldist
    mount /dev/vda2 /mnt/finaldist
    mount /dev/vda1 /mnt/finaldist/efi
    
    rm /home/live/.bash_history

    # mkdir -p /nlive/distfs
    # mkdir -p /nlive/distfs/{efi,bin,boot,dev,etc,home,lib,lib64,media,mnt,opt,proc,root,run,sbin,sys,tmp,usr,var}
    # mkdir -p /nlive/distfs/squashfs

    rsync --delete -avp /home/ /mnt/finaldist/home/ --exclude live/.cache --exclude live/.mozilla --exclude live/.local --exclude live/.bash_history
    rsync --delete -avp /sbin/ /mnt/finaldist/sbin/
    rsync --delete -avp /bin/ /mnt/finaldist/bin/
    rsync --delete -avp /root/ /mnt/finaldist/root/ --exclude .cache --exclude .mozilla --exclude .local --exclude .bash_history
    rsync --delete -avp /lib/ /mnt/finaldist/lib/ --exclude modules --exclude firmware
    rsync --delete -avp /lib64/ /mnt/finaldist/lib64/

    ### Prepare some other files in /usr before mounting
    OTHERUSRFILES="bin/sudo"
    for FN in $OTHERUSRFILES; do
        cp --archive /usr/$FN /mnt/finaldist/usr/$FN
    done

    # Sync /boot only when there is new kernel
    # rsync --delete -avpx /boot/ /mnt/finaldist/boot/




    rsync --delete -avp /etc/ /mnt/finaldist/etc/
    # Remember to regenerate `/etc/fstab`!
    echo "############## NLive-Gentoo" >/mnt/finaldist/etc/fstab
    echo "UUID=f7b0dcde-1980-478a-8898-1e1123544d99     /       ext4        rw,noatime      0 1" >>/mnt/finaldist/etc/fstab
    echo "UUID=6108-828E                                /efi    vfat        rw,noatime      0 2" >>/mnt/finaldist/etc/fstab
    for i in lib usr var opt; do
        echo "/sqfs.$i                                     /$i    squashfs    ro,noatime,errors=continue      0 2" >>/mnt/finaldist/etc/fstab
    done
    
    # Chroot and install...

    # Normal Mount
        mount -t squashfs -o loop /mnt/finaldist/output.squashfs /mnt/finaldist/squashfs
        for i in lib opt usr var; do
            mount --rbind /mnt/finaldist/squashfs/$i /mnt/finaldist/$i
        done
        for i in sys dev proc run/udev; do
            mount --rbind /$i /mnt/finaldist/$i
        done
        mount --rbind /var/db/repos /mnt/finaldist/var/db/repos

    # Debug Mount
        for i in lib opt usr var; do
            mount --rbind /$i /mnt/finaldist/$i
        done
        mkdir -p /mnt/finaldist/run/udev
        for i in sys dev proc run/udev; do
            mount --rbind /$i /mnt/finaldist/$i
        done

    # Continue...
    chroot /mnt/finaldist /bin/bash
    export PS1="\n(chroot) ${PS1:2}"

    

    ### No longer need the initramfs from genkernel since we build our own
    ### But we still need it as the template for further customization
    # genkernel initramfs
    # cd /usr/src/initramfs
    # cpio --extract --make-directories --format=newc --no-absolute-filenames < /boot/initramfs-5.14.8-gentoo-dist.img


}

function SC_applyMyInitramfsDiff() {
    ### We use these commands in this section to apply our diff for creating the real custom initramfs

    # Prepare out directory
    cd /usr/src/initramfs-neruthes
    touch NLIVE_INITRAMFS

    # Modify initramfs init script
    # This section should be added before copyKeymap

##### INITRAMFS INIT ONLY #####
log_msg "About to mount SquashFS"
modprobe squashfs
for i in usr var opt lib; do
    mount /newroot/sqfs.$i /newroot/$i
done
log_msg "Should have mounted SquashFS"
if [ -e /newroot/opt/firefox/defaults ]; then
		good_msg "Yes, we can find mounted content"
else
       	bad_msg "No, the mount failed"
fi
##### INITRAMFS INIT ONLY #####



    # Need these kernel modules in initramfs
    MODLIST="kernel/fs/squashfs/squashfs.ko"
    KERNELVER="5.14.8-gentoo-dist"
    for MOD in $MODLIST; do
        echo "Copying   /lib/modules/$KERNELVER/$MOD  ->  /usr/src/initramfs-neruthes/lib/modules/$KERNELVER/$MOD"
        cp --archive /lib/modules/$KERNELVER/$MOD /usr/src/initramfs-neruthes/lib/modules/$KERNELVER/$MOD
    done

    # Copy some files into initramfs...
    COPYFILES="/bin/chroot"
    for FILEPATHABS in $COPYFILES; do
        cp --archive $FILEPATHABS /usr/src/initramfs-neruthes$FILEPATHABS
    done

    # This makes our own initramfs
    cd /usr/src/initramfs-neruthes
    find . -print0 | cpio --null --create --verbose --format=newc | gzip --best > /boot/initramfs-5.14.8-gentoo-dist.img

    # Remember to generate grub.cfg!
    # grub-install --removable --target=x86_64-efi --efi-directory=/efi
    grub-mkconfig -o /boot/grub/grub.cfg
}


function SC_mklive() {
    echo "Not implemented."
}

if [[ -z $1 ]]; then
    echo "Please specify an action:"
    echo ""
    echo "    mksqfs, mklive"
    exit 1
fi

SC_$1